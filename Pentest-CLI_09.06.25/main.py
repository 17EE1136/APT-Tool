# main.py

from modules.reconnaissance import run_reconnaissance_tools,run_reconnaissance_batch
from modules.exploitation import run_exploitation_tools, run_exploitation_batch
from modules.cracking import run_cracking_tools,run_cracking_batch
from modules.post_exploitation import run_post_exploitation_tools,run_post_exploitation_batch

import concurrent.futures

def print_menu():
    print("\nPenTest Automation CLI")
    print("1. Reconnaissance")
    print("2. Exploitation")
    print("3. Cracking")
    print("4. Post-Exploitation")
    print("5. Exit")

def get_tools_for_module(module):
    tool_options = {
        "Reconnaissance":   ["Amass", "Nmap", "Nslookup", "Whois", "Recon-ng", "Sublist3r", "Nikto"],
        "Exploitation":     ["SQLmap", "Metasploit", "Shellshock", "Gobuster", "FFUF", "Dirb"],
        "Cracking":         ["John the Ripper", "Hashcat", "Medusa", "Hydra"],
        "Post-Exploitation":["Reverse Shell", "Meterpreter", "LinPEAS", "WinPEAS", "SMBclient", "SMBmap"]
    }
    tools = tool_options.get(module, [])
    print(f"\nSelect tools for {module}:")
    for i, t in enumerate(tools, 1):
        print(f"{i}. {t}")
    while True:
        nums = input("Enter tool numbers (e.g. 1,3,5): ").split(",")
        selected = [tools[int(n)-1] for n in nums if n.isdigit() and 1 <= int(n) <= len(tools)]
        if selected:
            return selected
        print("[!] Invalid selection. Try again.")

def batch_run(targets, func, tools):
    """
    Generic batch runner: one thread per target,
    each calling `func(target, tools)`
    """
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = {
            executor.submit(func, t.strip(), tools): t.strip()
            for t in targets if t.strip()
        }
        for future in concurrent.futures.as_completed(futures):
            tgt = futures[future]
            try:
                future.result()
            except Exception as e:
                print(f"[!] Error on target {tgt}: {e}")

def main():
    while True:
        print_menu()
        choice = input("Select an option (1-5): ").strip()

        if choice == '1':
            targets = input("Enter target domains/IPs (comma-separated): ").split(',')
            tools   = get_tools_for_module("Reconnaissance")
            batch_run(targets, run_reconnaissance_tools, tools)

        elif choice == '2':
            # use your specialized batch-mode from exploitation.py
            targets = input("Enter target domains/IPs (comma-separated): ").split(',')
            tools   = get_tools_for_module("Exploitation")
            run_exploitation_batch(targets, tools)

        elif choice == '3':
            targets = input("Enter target hashes/paths (comma-separated): ").split(',')
            tools   = get_tools_for_module("Cracking")
            batch_run(targets, run_cracking_tools, tools)

        elif choice == '4':
            targets = input("Enter target IPs/session details (comma-separated): ").split(',')
            tools   = get_tools_for_module("Post-Exploitation")
            batch_run(targets, run_post_exploitation_tools, tools)

        elif choice == '5':
            print("[+] Goodbye!")
            break

        else:
            print("[!] Invalid choice. Try again.")

if __name__ == "__main__":
    main()
