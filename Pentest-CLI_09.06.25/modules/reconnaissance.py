import subprocess
import os
import concurrent.futures

def create_target_folder(target):
    folder = f"results/{target}/reconnaissance"
    os.makedirs(folder, exist_ok=True)
    return folder

# --- per-tool functions ---
def run_amass(target):
    outfile = f"results/{target}/reconnaissance/amass.txt"
    cmd = f"amass enum -d {target} -o {outfile}"
    subprocess.run(cmd, shell=True)

def run_nmap(target):
    outfile = f"results/{target}/reconnaissance/nmap.txt"
    cmd = f"nmap -sC -sV {target} -oN {outfile}"
    subprocess.run(cmd, shell=True)

def run_nslookup(target):
    outfile = f"results/{target}/reconnaissance/nslookup.txt"
    cmd = f"nslookup {target} 8.8.8.8 > {outfile}"
    subprocess.run(cmd, shell=True)

def run_whois(target):
    outfile = f"results/{target}/reconnaissance/whois.txt"
    cmd = f"whois {target} > {outfile}"
    subprocess.run(cmd, shell=True)
    
"""

#def run_recon_ng(target):
    # using temporary workspace & exporting CSV report
    #ws = f"{target}_ws"
    #outfile = f"results/{target}/reconnaissance/recon-ng.csv"
    #cmd = (
      #  f"recon-ng -w {ws} -x \""
     #   f"workspaces select {ws}; "
    #    f"add domains {target}; "
   #     f"modules load recon/domains-hosts/bing; "
  #      f"run; "
 #       f"report csv {outfile}"
#        f"\""
#    )
#    subprocess.run(cmd, shell=True)

"""

def run_recon_ng(target):
    # make sure our recon folder exists
    recon_dir   = f"results/{target}/reconnaissance"
    os.makedirs(recon_dir, exist_ok=True)

    ws_name     = f"{target}_ws"
    outfile = f"{recon_dir}/recon-ng.csv"
    rc_file     = f"{recon_dir}/recon-ng-{target}.rc"

    # dump our recon-ng commands into a resource file
    with open(rc_file, "w") as f:
        f.write(f"workspaces create {ws_name}\n")
        f.write(f"workspaces select {ws_name}\n")
        f.write(f"add domains {target}\n")
        f.write("modules load recon/domains-hosts/bing\n")
        f.write("run\n")
        f.write(f"report csv {outfile}\n")
        f.write("exit\n")

    # run recon-ng once, pointing it at our .rc
    cmd = (
        f"recon-ng --no-check "
        f"-w {ws_name} "
        f"-r {rc_file}"
    )
    subprocess.run(cmd, shell=True, check=False)
    

#def run_sublist3r(target):
 #   outfile = f"results/{target}/reconnaissance/sublist3r.txt"
  #  cmd = f"sublist3r -d {target} -o {outfile}"
   # subprocess.run(cmd, shell=True)
    
def run_sublist3r(target):
    """
    Fire off Sublist3r from your PATH (or installed package), rather than
    pointing at a possibly-missing local script. This will save to the file.
    """
    outfile = f"results/{target}/reconnaissance/sublist3r.txt"
    cmd = f"sublist3r -d {target} -o {outfile}"
    subprocess.run(cmd, shell=True)

def run_nikto(target):
    outfile = f"results/{target}/reconnaissance/nikto.txt"
    command = f"nikto -h http://{target} -o {outfile}"
    subprocess.run(command, shell=True)


# toolâ†’func mapping
tools_mapping = {
    "Amass":     run_amass,
    "Nmap":      run_nmap,
    "Nslookup":  run_nslookup,
    "Whois":     run_whois,
    "Recon-ng":  run_recon_ng,
    "Sublist3r": run_sublist3r,
    "Nikto": run_nikto
}

def run_reconnaissance_tools(target, tools):
    """
    Run selected recon tools *in parallel* against one target.
    """
    create_target_folder(target)
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = {
            executor.submit(tools_mapping[tool], target): tool
            for tool in tools if tool in tools_mapping
        }
        for future in concurrent.futures.as_completed(futures):
            tool = futures[future]
            try:
                future.result()
                print(f"[+] {tool} completed successfully on {target}")
            except Exception as e:
                print(f"[!] {tool} failed on {target}: {e}")

    print(f"[+] Reconnaissance finished for {target}\n")


def run_reconnaissance_batch(targets, tools):
    """
    Fire off one thread per target, each running run_reconnaissance_tools().
    """
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = {
            executor.submit(run_reconnaissance_tools, t.strip(), tools): t.strip()
            for t in targets if t.strip()
        }
        for future in concurrent.futures.as_completed(futures):
            tgt = futures[future]
            try:
                future.result()
            except Exception as e:
                print(f"[!] Error reconning {tgt}: {e}")
    print("[+] All reconnaissance batches complete.\n")
